#Generated Form Function
function GenerateResponse($challengeItem,$length){
	$longanswer = ($challengeItem * (81521 + $length))
	$response = $longanswer.ToString()
	$response = $response.Substring(4,5)
	$response
}

#Path to a temporary location writable by the user...
$userPath = "C:\Users\$env:USERNAME\Documents"

#Would you like to enable e-mail?
$enableEmail = $true

function sendMail($lengthOfDelay){
  if($enableEmail){
  	#SMTP server name
  	$smtpServer = ""
  
  	#Creating a Mail object
  	$msg = new-object Net.Mail.MailMessage
  
  	#Creating SMTP server object
  	$smtp = new-object Net.Mail.SmtpClient($smtpServer)
  	
  	#Email structure 
    $msgFrom = ""
    $msgTo = ""
  	$msgSubject = "INFO: REBOOT DELAY REQUEST"
  	$msgBody = "A reboot delay request for $lengthOfDelay hour(s) has been processed for `n`nUser: $env:USERNAME `n`nComputer: $env:COMPUTERNAME"
  	$smtp.UseDefaultCredentials = $true
  
  	#setup credentials
  	$key = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)
  	$secureString = ""
  	$userForTransfer = ""
  	$password = ConvertTo-SecureString $secureString -Key $key
  	$credentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $userForTransfer, $password
  	
    #Sending email
  	Send-MailMessage -Body $msgBody -Subject $msgSubject -To $msgTo -From $msgFrom -SmtpServer $smtpServer -Credential $credentials
  }
}

function GenerateForm {
########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
# Generated On: 1/7/2015 3:34 PM
# Generated By: Nathan Ziehnert
########################################################################

#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
#endregion

#region Generated Form Objects
$main = New-Object System.Windows.Forms.Form
$label_Hours = New-Object System.Windows.Forms.Label
$combo_Hours = New-Object System.Windows.Forms.ComboBox
$label_Delay = New-Object System.Windows.Forms.Label
$button_Submit = New-Object System.Windows.Forms.Button
$BoxResponse4 = New-Object System.Windows.Forms.TextBox
$BoxResponse3 = New-Object System.Windows.Forms.TextBox
$BoxResponse2 = New-Object System.Windows.Forms.TextBox
$BoxResponse1 = New-Object System.Windows.Forms.TextBox
$BoxChallenge4 = New-Object System.Windows.Forms.TextBox
$BoxChallenge3 = New-Object System.Windows.Forms.TextBox
$BoxChallenge2 = New-Object System.Windows.Forms.TextBox
$BoxChallenge1 = New-Object System.Windows.Forms.TextBox
$label_Response = New-Object System.Windows.Forms.Label
$label_Challenge = New-Object System.Windows.Forms.Label
$label_Description = New-Object System.Windows.Forms.Label
$label_Title = New-Object System.Windows.Forms.Label
$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
#Provide Custom Code for events specified in PrimalForms.
$button_Submit_OnClick= 
{
	if(-not ($combo_Hours.Text -eq "")){
		if(($BoxResponse1.Text -match "^\d{5}$") -and ($BoxResponse2.Text -match "^\d{5}$") -and ($BoxResponse3.Text -match "^\d{5}$") -and ($BoxResponse4.Text -match "^\d{5}$")){
			#Generate Response Code
			[int]$challenge1 = [convert]::ToInt32($BoxChallenge1.Text,10) + 1111
			[int]$challenge2 = [convert]::ToInt32($BoxChallenge2.Text,10) + 2222
			[int]$challenge3 = [convert]::ToInt32($BoxChallenge3.Text,10) + 3333
			[int]$challenge4 = [convert]::ToInt32($BoxChallenge4.Text,10) + 4444
			[int]$hours = [convert]::ToInt32($combo_Hours.Text,10)
			$response1 = $BoxResponse1.Text
			$response2 = $BoxResponse2.Text
			$response3 = $BoxResponse3.Text
			$response4 = $BoxResponse4.Text
			
			if(($response1 -eq (GenerateResponse $challenge1 $hours))-and ($response2 -eq (GenerateResponse $challenge2 $hours))-and ($response3 -eq (GenerateResponse $challenge3 $hours)) -and ($response4 -eq (GenerateResponse $challenge4 $hours))){
				#setup credentials
				$key = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)
				$secureString = ""
				$userForTransfer = ""
				$password = ConvertTo-SecureString $secureString -Key $key
				$credentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $userForTransfer, $password
				
				$seconds = $hours * 60 * 60 #convert the delay to seconds
				$argumentList = "-WindowStyle Hidden -noprofile -command &{Start-Process 'shutdown.exe' -ArgumentList '-t $seconds -r' -Verb RunAs}"
				Start-Process powershell -Wait -Credential $credentials -ArgumentList "-WindowStyle Hidden -noprofile -command &{Start-Process 'net.exe' -Wait -ArgumentList 'stop CCMExec' -Verb RunAs -WorkingDirectory 'C:\Windows\System32'}" -WorkingDirectory 'C:\Windows\System32'
				Start-Sleep -Seconds 2
				Start-Process powershell -Wait -Credential $credentials -ArgumentList "-WindowStyle Hidden -noprofile -command &{Start-Process 'shutdown.exe' -Wait -ArgumentList '-a' -Verb RunAs -WorkingDirectory 'C:\Windows\System32'}" -WorkingDirectory 'C:\Windows\System32'
				Start-Sleep -Seconds 2
				Start-Process powershell -Wait -Credential $credentials -ArgumentList "-WindowStyle Hidden -noprofile -command &{Start-Process 'shutdown.exe' -Wait -ArgumentList '-t $seconds -r' -Verb RunAs -WorkingDirectory 'C:\Windows\System32'}" -WorkingDirectory 'C:\Windows\System32'
				
				sendMail $hours #notify the desktop team that a reboot delay was processed
				Remove-Item "$userPath\RebootDelayRequested.log" -Force #since we successfully completed the C/R, remove the indicator from the logs
				
				Exit				
			}else{
				[System.Windows.Forms.MessageBox]::Show("Incorrect Response!") 
			}
		}else{
			[System.Windows.Forms.MessageBox]::Show("Incorrect Regex!")
		}
	}else{
		[System.Windows.Forms.MessageBox]::Show("Delay Not Selected!")
	}
}

$handler_main_Load= 
{
	#Generate Challenge Codes
	$BoxChallenge1.Text = Get-Random -Minimum 10000 -Maximum 99999
	$BoxChallenge2.Text = Get-Random -Minimum 10000 -Maximum 99999
	$BoxChallenge3.Text = Get-Random -Minimum 10000 -Maximum 99999
	$BoxChallenge4.Text = Get-Random -Minimum 10000 -Maximum 99999

	#well, maybe they only have 30 seconds left before the reboot... this will give them an extra amount of time... but only once per completed C/R
	if(-not (Test-Path "c:\install_logs\RebootDelayRequested.log")){
		#setup credentials
		$key = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)
		$secureString = ""
		$userForTransfer = ""
		$password = ConvertTo-SecureString $secureString -Key $key
		$credentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $userForTransfer, $password
		
		$seconds = 1800 #30 minutes extra for my homies...
		$argumentList = "-WindowStyle Hidden -noprofile -command &{Start-Process 'shutdown.exe' -ArgumentList '-t $seconds -r' -Verb RunAs}"
		Start-Process powershell -Wait -Credential $credentials -ArgumentList "-WindowStyle Hidden -noprofile -command &{Start-Process 'net.exe' -Wait -ArgumentList 'stop CCMExec' -Verb RunAs -WorkingDirectory 'C:\Windows\System32'}" -WorkingDirectory 'C:\Windows\System32'
		Start-Sleep -Seconds 2
		Start-Process powershell -Wait -Credential $credentials -ArgumentList "-WindowStyle Hidden -noprofile -command &{Start-Process 'shutdown.exe' -Wait -ArgumentList '-a' -Verb RunAs -WorkingDirectory 'C:\Windows\System32'}" -WorkingDirectory 'C:\Windows\System32'
		Start-Sleep -Seconds 2
		Start-Process powershell -Wait -Credential $credentials -ArgumentList "-WindowStyle Hidden -noprofile -command &{Start-Process 'shutdown.exe' -Wait -ArgumentList '-t $seconds -r' -Verb RunAs -WorkingDirectory 'C:\Windows\System32'}" -WorkingDirectory 'C:\Windows\System32'
	}
	
	New-Item "$userPath\RebootDelayRequested.log" -ItemType File -Force
}

$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
	$main.WindowState = $InitialFormWindowState
}

#----------------------------------------------
#region Generated Form Code
$main.BackColor = [System.Drawing.Color]::FromArgb(255,255,239,213)
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 189
$System_Drawing_Size.Width = 512
$main.ClientSize = $System_Drawing_Size
$main.DataBindings.DefaultDataSourceUpdateMode = 0
$main.FormBorderStyle = 1
$main.Name = "main"
$main.Text = "Emergency Reboot Delay"
$main.add_Load($handler_main_Load)

$label_Hours.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 140
$System_Drawing_Point.Y = 132
$label_Hours.Location = $System_Drawing_Point
$label_Hours.Name = "label_Hours"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 17
$System_Drawing_Size.Width = 100
$label_Hours.Size = $System_Drawing_Size
$label_Hours.TabIndex = 0
$label_Hours.Text = "Hour(s)"

$main.Controls.Add($label_Hours)

$combo_Hours.DataBindings.DefaultDataSourceUpdateMode = 0
$combo_Hours.DropDownStyle = 2
$combo_Hours.FormattingEnabled = $True
$combo_Hours.Items.Add("1")|Out-Null
$combo_Hours.Items.Add("2")|Out-Null
$combo_Hours.Items.Add("3")|Out-Null
$combo_Hours.Items.Add("4")|Out-Null
$combo_Hours.Items.Add("5")|Out-Null
$combo_Hours.Items.Add("6")|Out-Null
$combo_Hours.Items.Add("7")|Out-Null
$combo_Hours.Items.Add("8")|Out-Null
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 81
$System_Drawing_Point.Y = 129
$combo_Hours.Location = $System_Drawing_Point
$combo_Hours.Name = "combo_Hours"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 53
$combo_Hours.Size = $System_Drawing_Size
$combo_Hours.TabIndex = 5

$main.Controls.Add($combo_Hours)

$label_Delay.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 132
$label_Delay.Location = $System_Drawing_Point
$label_Delay.Name = "label_Delay"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 17
$System_Drawing_Size.Width = 61
$label_Delay.Size = $System_Drawing_Size
$label_Delay.TabIndex = 0
$label_Delay.Text = "Delay:"

$main.Controls.Add($label_Delay)


$button_Submit.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 399
$System_Drawing_Point.Y = 154
$button_Submit.Location = $System_Drawing_Point
$button_Submit.Name = "button_Submit"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 100
$button_Submit.Size = $System_Drawing_Size
$button_Submit.TabIndex = 6
$button_Submit.Text = "Delay Reboot"
$button_Submit.UseVisualStyleBackColor = $True
$button_Submit.add_Click($button_Submit_OnClick)

$main.Controls.Add($button_Submit)

$BoxResponse4.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 399
$System_Drawing_Point.Y = 102
$BoxResponse4.Location = $System_Drawing_Point
$BoxResponse4.Name = "BoxResponse4"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 100
$BoxResponse4.Size = $System_Drawing_Size
$BoxResponse4.TabIndex = 4

$main.Controls.Add($BoxResponse4)

$BoxResponse3.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 293
$System_Drawing_Point.Y = 102
$BoxResponse3.Location = $System_Drawing_Point
$BoxResponse3.Name = "BoxResponse3"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 100
$BoxResponse3.Size = $System_Drawing_Size
$BoxResponse3.TabIndex = 3

$main.Controls.Add($BoxResponse3)

$BoxResponse2.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 187
$System_Drawing_Point.Y = 102
$BoxResponse2.Location = $System_Drawing_Point
$BoxResponse2.Name = "BoxResponse2"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 100
$BoxResponse2.Size = $System_Drawing_Size
$BoxResponse2.TabIndex = 2

$main.Controls.Add($BoxResponse2)

$BoxResponse1.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 81
$System_Drawing_Point.Y = 102
$BoxResponse1.Location = $System_Drawing_Point
$BoxResponse1.Name = "BoxResponse1"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 100
$BoxResponse1.Size = $System_Drawing_Size
$BoxResponse1.TabIndex = 1

$main.Controls.Add($BoxResponse1)

$BoxChallenge4.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 399
$System_Drawing_Point.Y = 75
$BoxChallenge4.Location = $System_Drawing_Point
$BoxChallenge4.Name = "BoxChallenge4"
$BoxChallenge4.ReadOnly = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 100
$BoxChallenge4.Size = $System_Drawing_Size
$BoxChallenge4.TabIndex = 0
$BoxChallenge4.TabStop = $False

$main.Controls.Add($BoxChallenge4)

$BoxChallenge3.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 293
$System_Drawing_Point.Y = 75
$BoxChallenge3.Location = $System_Drawing_Point
$BoxChallenge3.Name = "BoxChallenge3"
$BoxChallenge3.ReadOnly = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 100
$BoxChallenge3.Size = $System_Drawing_Size
$BoxChallenge3.TabIndex = 0
$BoxChallenge3.TabStop = $False

$main.Controls.Add($BoxChallenge3)

$BoxChallenge2.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 187
$System_Drawing_Point.Y = 75
$BoxChallenge2.Location = $System_Drawing_Point
$BoxChallenge2.Name = "BoxChallenge2"
$BoxChallenge2.ReadOnly = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 100
$BoxChallenge2.Size = $System_Drawing_Size
$BoxChallenge2.TabIndex = 0
$BoxChallenge2.TabStop = $False

$main.Controls.Add($BoxChallenge2)

$BoxChallenge1.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 81
$System_Drawing_Point.Y = 75
$BoxChallenge1.Location = $System_Drawing_Point
$BoxChallenge1.Name = "BoxChallenge1"
$BoxChallenge1.ReadOnly = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 100
$BoxChallenge1.Size = $System_Drawing_Size
$BoxChallenge1.TabIndex = 0
$BoxChallenge1.TabStop = $False

$main.Controls.Add($BoxChallenge1)

$label_Response.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 105
$label_Response.Location = $System_Drawing_Point
$label_Response.Name = "label_Response"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 17
$System_Drawing_Size.Width = 61
$label_Response.Size = $System_Drawing_Size
$label_Response.TabIndex = 0
$label_Response.Text = "Response:"

$main.Controls.Add($label_Response)

$label_Challenge.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 78
$label_Challenge.Location = $System_Drawing_Point
$label_Challenge.Name = "label_Challenge"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 17
$System_Drawing_Size.Width = 61
$label_Challenge.Size = $System_Drawing_Size
$label_Challenge.TabIndex = 0
$label_Challenge.Text = "Challenge:"

$main.Controls.Add($label_Challenge)

$label_Description.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 13
$System_Drawing_Point.Y = 40
$label_Description.Location = $System_Drawing_Point
$label_Description.Name = "label_Description"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 31
$System_Drawing_Size.Width = 486
$label_Description.Size = $System_Drawing_Size
$label_Description.TabIndex = 0
$label_Description.Text = "This utility will allow you to request a delay for a scheduled SCCM reboot.  You must submit the challenge code and delay to the Help Desk who will then provide you with a response code."
$label_Description.TextAlign = 2

$main.Controls.Add($label_Description)

$label_Title.DataBindings.DefaultDataSourceUpdateMode = 0
$label_Title.Font = New-Object System.Drawing.Font("Segoe UI",12,1,3,1)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 13
$System_Drawing_Point.Y = 13
$label_Title.Location = $System_Drawing_Point
$label_Title.Name = "label_Title"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 486
$label_Title.Size = $System_Drawing_Size
$label_Title.TabIndex = 0
$label_Title.Text = "Emergency Reboot Delay Request"
$label_Title.TextAlign = 2

$main.Controls.Add($label_Title)

#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $main.WindowState
#Init the OnLoad event to correct the initial state of the form
$main.add_Load($OnLoadForm_StateCorrection)
#Show the Form
$main.ShowDialog()| Out-Null

} #End Function

#Call the Function
GenerateForm
